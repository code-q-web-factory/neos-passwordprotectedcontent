prototype(CodeQ.PasswordProtectedContent:Component.PasswordForm) < prototype(Neos.Fusion:Component) {
	##################################
    # These settings are public API: #
    ##################################
	formMessage = ${Translation.translate('formMessage', null, [], 'Fusion/Component/PasswordForm', 'CodeQ.PasswordProtectedContent')}
	wrongPasswordErrorMessage = ${Translation.translate('wrongPasswordError', null, [], 'Fusion/Component/PasswordForm', 'CodeQ.PasswordProtectedContent')}
	wrongPasswordStyles = 'color: red;'

	##################################
    # Property set by the processor: #
    ##################################
	wrongPassword = false

	# rendering
	renderer = afx`
		<div class={'password-protected-content' + (props.wrongPasswordStyles ? ' password-protected-content--has-error' : '')}>
			<form class="password-protected-content__form" action="" method="POST">
				<label class="password-protected-content__form-label" for="passwordProtectedContentPassword">{props.formMessage}</label>
				<input class="password-protected-content__form-input" id="passwordProtectedContentPassword" type="password" name="passwordProtectedContentPassword" />
				<div class="password-protected-content__eror-message" id="passwordProtectedContentPasswordError" @if.has={props.wrongPassword} style={props.wrongPasswordStyles}>
					{props.wrongPasswordErrorMessage}
					<script>{"
						document.getElementById('passwordProtectedContentPassword').addEventListener('input', function() {
							/* as soon as the user types, remove the error message */
							var el = document.getElementById('passwordProtectedContentPasswordError'); if(el) el.remove();
						}, false);
					"}</script>
				</div>
				<input class="password-protected-content__form-submit" type="submit" value="Submit" />
			</form>
		</div>
	`

	@cache {
		mode = 'embed'
	}
}
